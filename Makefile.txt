# Main commands:
# - make init: Full setup (venv, dependencies, database initialization, and git hooks)
# - make backend: Start the API server
# - make clean: Clean up temporary files and virtual environment

# Configuration
PYTHON := python
VENV := venv
PORT := 5000
HOST := 0.0.0.0
APP := main:app
REQUIREMENTS := requirements.txt
INIT_SCRIPT := scripts/init_dynamodb.py

# Check for operating system differences
# Improved OS detection for Windows, including MINGW (Git Bash)
ifeq ($(OS),Windows_NT)
    VENV_BIN := $(VENV)/Scripts
    VENV_ACTIVATE := $(VENV)/Scripts/activate
    RM := rmdir /s /q
    TEST_CMD := if not exist $(VENV) mkdir $(VENV)
else
    # Additional check for MINGW/Git Bash on Windows
    ifeq ($(shell uname -s),MINGW64_NT-10.0)
        VENV_BIN := $(VENV)/Scripts
        VENV_ACTIVATE := $(VENV)/Scripts/activate
        # For MINGW, use rm -rf instead of Windows rmdir
        RM := rm -rf
        TEST_CMD := test -d $(VENV) || mkdir -p $(VENV)
    else
        ifeq ($(shell uname -s),MINGW32_NT-10.0)
            VENV_BIN := $(VENV)/Scripts
            VENV_ACTIVATE := $(VENV)/Scripts/activate
            RM := rm -rf
            TEST_CMD := test -d $(VENV) || mkdir -p $(VENV)
        else
            # Unix-like systems (Linux, macOS)
            VENV_BIN := $(VENV)/bin
            VENV_ACTIVATE := $(VENV)/bin/activate
            RM := rm -rf
            TEST_CMD := test -d $(VENV) || mkdir -p $(VENV)
        endif
    endif
endif

# Use the correct bin directory based on OS
PIP := $(VENV_BIN)/pip
PYTHON_VENV := $(VENV_BIN)/python
UVICORN := $(VENV_BIN)/uvicorn

# Special handling for MINGW (Git Bash on Windows)
# This ensures commands are properly executed in the MINGW environment
ifneq (,$(findstring MINGW,$(shell uname -s)))
    # Define a helper function to convert paths for MINGW
    MINGW_PATH = $(subst /,\\,$(1))
    # Use explicit command for running uvicorn in MINGW
    RUN_UVICORN = cd $(CURDIR) && . $(VENV_ACTIVATE) && uvicorn $(APP) --host=$(HOST) --port=$(PORT) $(1)
else
    # For other systems, use the standard approach
    RUN_UVICORN = $(UVICORN) $(APP) --host=$(HOST) --port=$(PORT) $(1)
endif

# Main target for complete initialization
.PHONY: init
init: venv install db-init setup-hooks
	@echo "Initialization complete! Run 'make backend' to start the application."

# Create virtual environment
.PHONY: venv
venv:
	@echo "Creating virtual environment..."
	@$(PYTHON) -m venv $(VENV)
	@echo "Virtual environment created at ./$(VENV)"

# Install dependencies
.PHONY: install
install: venv
	@echo "Installing dependencies..."
	@$(PYTHON_VENV) -m pip install --upgrade pip
	@$(PYTHON_VENV) -m pip install -r $(REQUIREMENTS)
	@echo "Dependencies installed successfully"

# Ensure all dev dependencies are installed
.PHONY: ensure-dev-deps
ensure-dev-deps: venv
	@echo "Ensuring development dependencies are installed..."
	@$(PYTHON_VENV) -m pip list | grep -q "pytest " || $(PYTHON_VENV) -m pip install pytest pytest-cov
	@$(PYTHON_VENV) -m pip list | grep -q "flake8 " || $(PYTHON_VENV) -m pip install flake8
	@$(PYTHON_VENV) -m pip list | grep -q "black " || $(PYTHON_VENV) -m pip install black
	@$(PYTHON_VENV) -m pip list | grep -q "isort " || $(PYTHON_VENV) -m pip install isort
	@$(PYTHON_VENV) -m pip list | grep -q "mypy " || $(PYTHON_VENV) -m pip install mypy
	@$(PYTHON_VENV) -m pip list | grep -q "autoflake " || $(PYTHON_VENV) -m pip install autoflake
	@echo "All development dependencies are installed"

# Initialize database
.PHONY: db-init
db-init: venv
	@echo "Initializing DynamoDB tables..."
	@$(PYTHON_VENV) $(INIT_SCRIPT)
	@echo "Database initialization complete"

# Initialize database for local development
.PHONY: db-init-local
db-init-local: venv
	@echo "Initializing local DynamoDB tables..."
	@$(PYTHON_VENV) $(INIT_SCRIPT) --local
	@echo "Local database initialization complete"

# Start the backend server
.PHONY: backend
backend:
	@echo "Checking for virtual environment..."
	@if [ ! -d "$(VENV)" ]; then \
		echo "Virtual environment not found, creating..."; \
		$(PYTHON) -m venv $(VENV); \
		echo "Installing dependencies..."; \
		$(PYTHON_VENV) -m pip install --upgrade pip; \
		$(PYTHON_VENV) -m pip install -r $(REQUIREMENTS); \
	fi
	@echo "Starting backend server on $(HOST):$(PORT)..."
ifneq (,$(findstring MINGW,$(shell uname -s)))
	@echo "Running in MINGW environment (Git Bash)..."
	@bash -c "source $(VENV_ACTIVATE) && uvicorn $(APP) --host=$(HOST) --port=$(PORT) --reload"
else
	@$(RUN_UVICORN) --reload
endif

# Start backend in production mode (no reload)
.PHONY: backend-prod
backend-prod: venv
	@echo "Starting backend server in production mode..."
ifneq (,$(findstring MINGW,$(shell uname -s)))
	@echo "Running in MINGW environment (Git Bash)..."
	@bash -c "source $(VENV_ACTIVATE) && uvicorn $(APP) --host=$(HOST) --port=$(PORT)"
else
	@$(RUN_UVICORN)
endif

# Run tests
.PHONY: test
test: ensure-dev-deps
	@echo "Running tests..."
	@$(PYTHON_VENV) -m pytest

# Run tests with coverage
.PHONY: test-coverage
test-coverage: ensure-dev-deps
	@echo "Running tests with coverage..."
	@$(PYTHON_VENV) -m pytest --cov=. --cov-report=term --cov-report=html

# Lint code
.PHONY: lint
lint: ensure-dev-deps
	@echo "Linting code..."
	@$(PYTHON_VENV) -m flake8
	@echo "Linting complete"

# Auto-fix linting issues where possible
.PHONY: lint-fix
lint-fix: ensure-dev-deps
	@echo "Attempting to automatically fix linting issues..."
	@echo "Running black formatter..."
	@$(PYTHON_VENV) -m black .
	@echo "Running isort to fix imports..."
	@$(PYTHON_VENV) -m isort .
	@echo "Removing unused imports and variables..."
	@$(PYTHON_VENV) -m autoflake --in-place --remove-all-unused-imports --remove-unused-variables --recursive .
	@echo "Auto-fixing complete! Run 'make lint' to check remaining issues."

# Format code with black and isort
.PHONY: format
format: ensure-dev-deps
	@echo "Formatting code..."
	@echo "Running black formatter..."
	@$(PYTHON_VENV) -m black .
	@echo "Running isort to fix imports..."
	@$(PYTHON_VENV) -m isort .
	@echo "Formatting complete"

# Type checking with mypy
.PHONY: type-check
type-check: ensure-dev-deps
	@echo "Running type checking..."
	@$(PYTHON_VENV) -m mypy .
	@echo "Type checking complete"

# Pre-commit target that runs all checks
.PHONY: pre-commit
pre-commit: format lint-fix type-check
	@echo "All pre-commit checks passed! Note: Some linting issues may remain that couldn't be auto-fixed."

# Create pre-commit script file
.PHONY: create-pre-commit-script
create-pre-commit-script:
	@echo "Creating pre-commit script..."
	@cat > pre-commit.sh << 'EOF'
#!/bin/bash

# Exit on errors (except for the linting step which we handle specially)
set -e

echo "?? Running pre-commit checks..."

# Run auto-formatting (this should always happen)
echo "??? Formatting code..."
make format

# Run auto-fix for linting issues
echo "?? Auto-fixing linting issues..."
make lint-fix

# Run linting check but don't fail on errors
echo "?? Checking for remaining linting issues..."
make lint

# Store the exit code from linting
LINT_EXIT_CODE=$?

# Run type checking (will exit on failure)
echo "?? Type checking..."
make type-check

# If linting had issues
if [ $LINT_EXIT_CODE -ne 0 ]; then
    echo "?? Linting issues were found!"
    echo "These issues couldn't be automatically fixed."
    
    # Ask the user if they want to proceed
    read -p "Do you want to commit anyway? (y/n) " -n 1 -r
    echo
    
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo "Commit aborted. Please fix the linting issues before committing."
        exit 1
    fi
    
    echo "Proceeding with commit despite linting issues..."
fi

echo "? Pre-commit checks completed successfully!"
EOF
	@chmod +x pre-commit.sh
	@echo "Pre-commit script created successfully!"

# Setup git hooks
.PHONY: setup-hooks
setup-hooks: create-pre-commit-script
	@echo "Setting up git hooks..."
	@mkdir -p .git/hooks
	@cp pre-commit.sh .git/hooks/pre-commit
	@chmod +x .git/hooks/pre-commit
	@echo "Git hooks set up successfully"

# Clean up
.PHONY: clean
clean:
	@echo "Cleaning up..."
	@$(RM) $(VENV) 2>/dev/null || true
	@$(RM) __pycache__ 2>/dev/null || true
	@$(RM) .pytest_cache 2>/dev/null || true
	@$(RM) .coverage 2>/dev/null || true
	@$(RM) htmlcov 2>/dev/null || true
	@find . -type d -name __pycache__ -exec $(RM) {} + 2>/dev/null || true
	@echo "Cleanup complete"

# Generate documentation
.PHONY: docs
docs: venv
	@echo "Generating documentation..."
	@echo "Installing pdoc for documentation..."
	@$(PYTHON_VENV) -m pip list | grep -q "pdoc " || $(PYTHON_VENV) -m pip install pdoc
	@echo "Generating documentation for project modules..."
	@mkdir -p docs
ifneq (,$(findstring MINGW,$(shell uname -s)))
	@echo "Running in MINGW environment..."
	@bash -c "cd $(CURDIR) && PYTHONPATH=$(CURDIR) $(PYTHON_VENV) -m pdoc -d google -o ./docs main.py api config middleware services utils"
else
	@cd $(CURDIR) && PYTHONPATH=$(CURDIR) $(PYTHON_VENV) -m pdoc -d google -o ./docs main.py api config middleware services utils
endif
	@echo "Documentation generated in ./docs"
	@echo "Note: Some warnings are expected due to project structure and can be ignored."

# Show help
.PHONY: help
help:
	@echo "Available commands:"
	@echo "  make init           - Setup environment, initialize database, and set up git hooks"
	@echo "  make venv           - Create virtual environment only"
	@echo "  make install        - Install dependencies only"
	@echo "  make db-init        - Initialize AWS DynamoDB tables"
	@echo "  make db-init-local  - Initialize local DynamoDB tables"
	@echo "  make backend        - Run the backend server with auto-reload"
	@echo "  make backend-prod   - Run the backend server in production mode"
	@echo "  make test           - Run tests"
	@echo "  make test-coverage  - Run tests with coverage report"
	@echo "  make lint           - Run linter"
	@echo "  make lint-fix       - Auto-fix linting issues where possible"
	@echo "  make format         - Format code with black and isort"
	@echo "  make type-check     - Run type checking with mypy"
	@echo "  make pre-commit     - Run all pre-commit checks"
	@echo "  make create-pre-commit-script - Create the pre-commit script file"
	@echo "  make setup-hooks    - Set up Git pre-commit hooks"
	@echo "  make clean          - Clean up temporary files and virtual environment"
	@echo "  make docs           - Generate documentation"
	@echo "  make help           - Show this help message"

# Default target
.DEFAULT_GOAL := help